- fix backend build compilation error when using "nix build"

last 25 log lines:
>    --> backend/src/db/q/mod.rs:286:18
>     |
> 286 |     let script = include_str!("endpoint_hits/ensure_table.cozo");
>     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     |
>     = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)
>
> error: couldn't read backend/src/db/q/endpoint_hits/put.cozo: No such file or directory (os error 2)
>    --> backend/src/db/q/mod.rs:293:18
>     |
> 293 |     let script = include_str!("endpoint_hits/put.cozo");
>     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     |
>     = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)
>
> error: couldn't read backend/src/db/q/endpoint_hits/find.cozo: No such file or directory (os error 2)
>    --> backend/src/db/q/mod.rs:308:18
>     |
> 308 |     let script = include_str!("endpoint_hits/find.cozo");
>     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     |
>     = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)
>



- fix frontend build compilation error when using "nix build"

error: couldn't read frontend/src/../md/md_post.md: No such file or directory (os error 2)
  --> frontend/src/switch.rs:86:55
   |
86 | ...                   <MarkdownPreviewPage md={ include_str!("../md/md_post.md") } />
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

error: couldn't read frontend/src/../md/README.md: No such file or directory (os error 2)
  --> frontend/src/switch.rs:96:39
   |
96 | ...                   <Post md={include_str!("../md/README.md")}/>
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)

- find a way to reuse derivations for rust/cargo/trunk/etc to stop redownload/recompile for every project
 using the utility versions, example with rust:

store % fd rust-default-1.76.0 -td
rvn32d3qyw3ad2m7dgigfwg9jvwlwrr3-rust-default-1.76.0/
6f9h1hwzjwllmkvrhml380g8fg12hsmc-rust-default-1.76.0/
bc272lrqcr48njbz1yf5xl1l2vzcxvx8-rust-default-1.76.0/
1vmq655g9lyh9578gv92qnpvgly851xf-rust-default-1.76.0/
4njkk96ywvdg36zvjk27r45ajxqan290-rust-default-1.76.0/
md2idg7ig83ljpl4150n10bp027psm22-rust-default-1.76.0/
6qb5nh37lhr0ji3za8kw19pwcyldxqbg-rust-default-1.76.0/
cfz8r8wvynwh9bcr0vg428bqsibgg6pp-rust-default-1.76.0/
q9qvh51syxm9ldg85s6m9npwa1pyvvqq-rust-default-1.76.0/
mhn66zfrs1zi2sj16bzmmzp9y8vcsj0z-rust-default-1.76.0/

- expose "trunk" from crane instead of nixpkgs version
- figure traces under INFO producing 3 traces with DEBUG
- protect endpoint_hits